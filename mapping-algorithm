
//example input: (ColorMap '((A (B C E)) (B (A E F)) (C (A E F)) (D (F)) (E (A B C F)) (F (B C D E))))
colormap(InputGraphMap){
	lstcolors = '((RED GREEN BLUE YELLOW))
	lstforward = ()
	lstNodes = ()  
	lstcutset = ()	
	lstfinal = () 
	temp = ()
	lstnei = ()
	color = nil
	copyinput = ()
	lstdomain =()
	lsttopo = ()
	InputGraph = ()  

	InputGraph = InputGraphMap 
	lstNodes = (mapcar #'(lambda(y) (first y)) InputGraph)  //get the nodes of the inputgraph graph

	dolist (a lstNodes){  //traverse the list of nodes
		lstforward += (a lstcolors)  //associate domain (R G B Y) with each country
	}           

	lstforward = reverse lstforward   //reverse lstforward
	lstfinal = lstforward  //make a copy of lstforward
	lstcutset = cutset(InputGraph)  //get the cutset nodes of inputgraph in lstcutset
	copyinput = InputGraph  //make a copy of inputgraph

	dolist(b lstcutset){  //traverse through lstcutset to get the linear tree
		copyinput = copyinput with b removed  //remove current cutset node from the inputgraph as it is already colored.
		copyinput = removevertex((b) copyinput)  //remove current cutset node from the neighboring list of the inputgraph.
	}

	lsttopo = toposort(copyinput)  //toposort will return a list conataining the edges and the sorting order

	dolist(cut lstcutset){  //traverse the cutset to color it
		loop {  //loop until a suitable color for the cutset is found
			(second (find cut lstfinal :key #'first :test #'equal)) = (first (second (find cut lstfinal :key #'first :test #'equal)))  //set the color of cutset to first of the available colors
			color = (second (find cut lstfinal :key #'first :test #'equal))  //save the assigned color
			lstnei = (second (find cut InputGraph :key #'first :test #'equal))  //get the neighbors of cutset

			dolist(a lstnei){  //traverse the neighbors of the current cutset to remove the color assigned to cutset from their domains.
				(second (find a lstfinal :key #'first :test #'equal) = (remove color (second (find a lstfinal :key #'first :test #'equal)))) //remove the color assigned to cutset from its neighbor.
			}

			lstdomain = arc(first item of lsttopo, lstfinal)  //check the arc consistency of the tree with the assigned color

			if lstdomain!= null){  
				if(the tree is arc consistent){
					temp = (cons (find cut lstfinal :key #'first :test #'equal) temp) //add the assigned cutsetset node into the list temp.
					lstfinal = (remove cut lstfinal :key #'car )) 
					Inputgraph = (remove cut Inputgraph :key #'car )  //remove current cutset node from the inputgraph as it is already colored.
					Inputgraph = (removevertex (list cut) Inputgraph)  //remove current cutset node from the inputgraph as it is already colored
					lstforward = lstfinal  //save the lstfinal state in lstforward
					return temp
				}
				if(tree is not arc consistent){
					(setf lstfinal (copy-tree lstforward) )  ;revert back lstfinal to last saved state 
					(setf (second (find cut lstfinal :key #'first :test #'equal)) (rest (second (find cut lstfinal :key #'first :test #'equal))))  //remove the assigned color and move to next available color
				}
			}
		}
	}
	temp += treesolver(first item of lsttopo, lstdomain, second item of lsttopo)  //color the tree at the end by and append colored cutset to it
}

//returns the cutset of the inputgraph
cutset(InputGraph){
	return cutset
}

//removes a vertex from the neighbor lists of the graph
removevertex(lstvertex lstgraph){
	dolist(a lstvertex){  //traverse through the vertices to be removed
		dolist(b lstgraph){  //traverse the graph
			if(find a in (second b)){  //if the vertex is found  in  the neighbor list
				(second b) = (second b) with a removed  //remove the vertex from the neighbor list
			}
		}
	}
	lstgraph  //return the changed graph
}

//removes in-consistent domains from the parent domain and return t if any changes are made in domain
revise(lstdomp lstdomc){
	revised = nil
	ldc = ()
	dolist(x (second lstdomp)){    //loop for each domain in the parent
		ldc = (second lstdomc) with x removed    //if a domain in the child does not allow the contstraint between the parent
		if(ldc == null){    //and child to be satisfied then remove that domain
			(second lstdomp) = (second lstdomp) with x removed
			revised = True
		}	
	}
	revised //return the revised value to chech arc consistancy
}

//makes the linear tree arc-consistent and returns false if it is not possible 
arc (lstarc lstdomain)
	q = ()
	lstdomp = () 
	lstdomc = ()
	temp = ()
	revised = nil 
	q = lstarc //copies the contents of lstarc to the queue q
	loop { 
		temp = pop q //pop the first parent-child from the topologically sorted tree
		lstdomp = find first item of temp in lstdomain and set to that //check the domain of the parent
		lstdomc = find second item of temp in lstdomain and set to that //check the domain of the child
		revised = revise(lstdomp lstdomc) //call the function revise on the domains of current parent-child
		if (revised == true) { //if the domain is 0 return nil
			if (second item of lstdomp == nil){ 
				return nil
			}
		if (q == null){ //when the queue is exhausted return the list of domains
			return lstdomain 
		}
	}
}

//sorts a linear tree and returns a list of edges and the order
toposort(inputgraph){
	edglst =()
	orderlst = ()
	lstneigh = ()
	copyinputgraph = inputgraph
	queue = ()
	flag = 0
	root = nil
	node = nil
	copyinputgraph = copy-tree(input)
	loop{    //loop until all the trees are ordered
		if (flag == 0){ 
			if (running for the first time){
				node = first item of inputgraph //node is the first node in inputgraph
				flag = 1  //node is the first of inputgraph
			}
			else{
				node = find the first item of queue in inputgraph  //node is the first node in the queue 
			}
		}
		copyinputgraph = copyinputgraph with node removed
		root = first item of node //I assume this is the state in node
		orderlst += root
		queue = queue with root removed

		lstneigh = second item of node  //get the neighbors of the root

		dolist(b lstneigh){  ;traverese neighbors of the root
			if (!(is b in orderlst)){   //if neighbor is not in the orderlist, it means it is not traversed yet
				(progn
				edglst += (root b) //add the edge (root neighbor) to the edgelist
				queue += (b)
				queue = reversed queue //add the neighbor to the queue
				)
			}
		}
		if(queue == null && copyinputgraph == null){ //if both queue and copyinputgraph are null return the list of edgelist and orderlist
			return edglst and orderlst 
		}
		else if(queue == null && copyinputgraph != null){ //if only queue is null, setf flag to 0 and traverse it for next tree
			inputgraph = copyinputgraph
			flag = 0
		}
	}
}

//colors ordered tree
color-tree(edges, order, domain){
	colorfirst = ()
	parent = ()
	colorp = ()
	lstdome = ()
	lstfinal = ()
	loop{
		colorfirst = pop first element off order
		parent = get parent from edges
		colorp = get the color of parent
		lstdome = grabs the available colors of colorfirst from domain
		lstdome = remove parent color from the available colors
		lstfinal = add colorfirst to lstfinal associated with whatever the first color in domain is
		if (order is empty){
			return lstfinal
		}
	}
}
